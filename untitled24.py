# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cnp8zyk-8t2Z6LqoM4B3124-p_7ym7qJ
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd

def imdb_scraper(id_list):
  # DataFrame Columns (not in order)
  rating = []
  reviews = []
  titles = []
  username = []
  found_useful = []
  date = []
  total_ratings = 0

  for id in id_list:
    url_short = f'http://www.imdb.com/title/{id}/'
    url_reviews = url_short + 'reviews?ref_=tt_urv'
    url_ratings = url_short + 'ratings?ref_=tturv_ql_4'


    while True:
      response = requests.get(url_reviews)
      soup = BeautifulSoup(response.text, 'html.parser')
      items = soup.find_all(class_='lister-item-content')

      # Ratings page
      page = request.get(url_ratings)
      content = BeautifulSoup(page.content, 'html.parser')

      total_ratings = list(content2.find(class_ = "allText"))
      total_ratings = total_ratings[0]
      total_ratings = re.findall(r'[0-9]+', total_ratings)
      total_ratings = ''.join(total_ratings)
      
      # populate lists
      for item in items:
          reviews.append(item.find(class_ = "text show-more__control").get_text())
          titles.append(item.find(class_ = "title").get_text())
          username.append(item.find(class_ = "display-name-link").get_text())
          found_useful.append(item.find(class_ = "actions text-muted").get_text())
          date.append(item.find(class_ = "review-date").get_text())
          try:
              rating.append(item.find(class_="rating-other-user-rating").find('span').text)
          except:
              rating.append('NaN')

      # loading more data
      load = soup.find(class_='load-more-data')
      try:
        key = load['data-key']
      except:
        break
      url_reviews = url_short + '/reviews/_ajax?paginationKey=' + key

  # create DataFrame
  df = pd.DataFrame(
        {
            'review':reviews,
            'rating':rating,
            'title':titles,
            'username':username,
            'found_useful':found_useful,
            'date':date,
            'no. of ratings':total_ratings
        })
  
  return df